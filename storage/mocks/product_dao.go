// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "github.com/inventory-management/model"
	mock "github.com/stretchr/testify/mock"
	gofr "gofr.dev/pkg/gofr"
)

// ProductDao is an autogenerated mock type for the ProductDao type
type ProductDao struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *ProductDao) CreateProduct(ctx *gofr.Context, product model.Product) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gofr.Context, model.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields: ctx
func (_m *ProductDao) GetAllProducts(ctx *gofr.Context) ([]model.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*gofr.Context) ([]model.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gofr.Context) []model.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*gofr.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductFromName provides a mock function with given fields: ctx, name
func (_m *ProductDao) GetProductFromName(ctx *gofr.Context, name string) (*model.Product, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetProductFromName")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*gofr.Context, string) (*model.Product, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(*gofr.Context, string) *model.Product); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*gofr.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, product
func (_m *ProductDao) UpdateProduct(ctx *gofr.Context, product model.Product) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gofr.Context, model.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductDao creates a new instance of ProductDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductDao {
	mock := &ProductDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
